# Copyright 2022 Stichting ThingsIX Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

forwarder:
    # described backend for the gateways
    backend:
        # Use Semtech UDP forwarder backend
        semtech_udp:
            # ip:port to bind the UDP listener to, ensure it is accessible by the gateways
            #
            # Example: 0.0.0.0:1680 to listen on port 1680 for all network interfaces.
            udp_bind: 0.0.0.0:1680
            # Fake RX timestamp.
            #
            # Fake the RX time when the gateways do not have GPS, in which case
            # the time would otherwise be unset.
            fake_rx_time: false
        
        # Use Basic Station forwarder backend
        # basic_station:
        #     # Address to listen for gateway connections
        #     #
        #     # Default: 0.0.0.0:3001
        #     bind: 0.0.0.0:3001
            
        #     # forwarder certificate
        #     #
        #     # default /etc/thingsix-forwarder/basic_station/cert.pem
        #     tls_cert: "/etc/thingsix-forwarder/basic_station/cert.pem"
            
        #     # forwarder private key
        #     #
        #     # Default: /etc/thingsix-forwarder/basic_station/private_key.pem
        #     tls_key: "/etc/thingsix-forwarder/basic_station/private_key.pem"
            
        #     # root certificate
        #     #
        #     # Default: /etc/thingsix-forwarder/basic_station/ca_cert.pem
        #     ca_cert: "/etc/thingsix-forwarder/basic_station/ca_cert.pem"            
            
        #     # Stats interval
        #     #
        #     # This defines the interval in which uplink / downlink statistics
        #     # are forwarded. Default 30s.
        #     stats_interval: 30s

        #     # Ping interval
        #     # default 1m
        #     ping_interval: 1m
            
        #     # Timesync interval
        #     #
        #     # This defines the interval in which a timesync request is send to
        #     # the gateway. Setting this to 0 disables sending timesync requests.
        #     timesync_interval: 1h

        #     # Read timeout.
        #     #
        #     # This interval must be greater than the configured ping interval.    
        #     # default 65s
        #     read_timeout: 1m5s

        #     # Write timeout
        #     # default: 1s
        #     write_timeout: 1s

        #     # Region, mandatory to enable basic station
        #     #
        #     # Valid values are: EU868, US915, CN470, AU915, AS923, AS923-2, 
        #     #                   AS923-3, AS923-4, RU864
        #     region: EU868
    
    # Gateways that can use this forwarder
    gateways:
        # Smart contract that verifies onboarding message and if valid registers
        # the gateway in the ThingsIX gateway registry.
        # batch_onboarder:
        #     # Batch onboarder smart contract address.
        #     address: "0x0000000000000000000000000000000000000000"

        # ThingsIX gateway registry.
        #
        # The registry contains all onboarded gateways with optional details set
        # by their owner. The forwarder periodically synces with the registry to
        # retrieve owner and extra gateway details.
        registry:
            # Retrieve gateway data from the registry through the API ThingsIX.
            # thingsix_api:
            # API endpoint
            endpoint: https://api.thingsix.com/gateways/v1/{id}
            
            # Retrieve gateway data direct from the ThingsIX gateway registry
            # smart contract. This requires blockchain.polygon configuration.
            # on_chain:
            #     # ThingsIX gateway registry address.
            #     address: "0x0000000000000000000000000000000000000000"

        # Forwarder gateway store
        store:
            # File based gateway store. This store contains all gateways and
            # their identity keys. Recommended for situations where the
            # forwarder only has a few gateways in its store.
            #
            # Full gateway store path on the file system
            file: /etc/thingsix-forwarder/gateways.yaml

            # Postgresql bases gateway store. This store contains all gateways
            # and their identity keys. Gateway records are store in the
            # gateway_store table.
            #
            # Connection details are set on the root configuration level.
            # postgresql: false

            # Interval on which the forwarder syncs with the ThingsIX gateway
            # registry. Since gateway data is typically very static setting this
            # interval too short will lead to additional data traffic without
            # much benefit.
            refresh: 1h
        
            # Set a default frequency plan for gateways that are not onboarded.
            #
            # By default the forwarder will only forward data for gateways in its
            # store that are onboarded and have their location and frequency plan
            # set. With this option the forwarder will use the default frequency
            # plan for gateways in its store that are not fully onboarded and
            # forwards their data.
            #
            # Valid values are: EU868, US915, CN779, EU433, AU915, CN470, AS923,
            #                   AS923-2, AS923-3, KR920, IN865, RU864, AS923-4
            # default_frequency_plan: EU868
        
        # Optionally record gateway local id's for unknown gateways to a file. 
        # This file can be imported into the gateway store later. This is
        # convenient if you have a lot of gateways that you would otherwise need
        # to add to the store 1 by 1.
        record_unknown:
            # Path to file where unknown gateways are recorded, must be 
            # writeable by the forwarder. If file and postgresql are not set the
            # default is to use file /etc/thingsix-forwarder/unknown_gateways.yaml.
            #
            # Set to an empty string to disable recording.
            file: /etc/thingsix-forwarder/unknown_gateways.yaml

            # Store local id's for unknown gateways in PostgreSQL. Database
            # postgresql details are set on the root configuration level.
            # Unknown gateways are recorded in the unknown_gateways table.
            #
            # Set to true to enable recording in postgresql, remove or set to
            # false to disable.
            # postgresql: false

        # Internal Forwarder HTTP API
        #
        # API to interact with the forwarder. This should not be public
        # accessible since it provides direct access to gateway management!
        # By default is binds on 127.0.0.1:8080, set to an empty string "" to
        # disable the API.
        # api:
        #     address: "127.0.0.1:8080"

    # Routers to forward gateway data to.
    routers:
        # List with default routers
        #
        # Default routers are routers that will receive all gateway data and
        # don't have to be registered at ThingsIX.

        #default:
        #    - endpoint: localhost:3200
        #      name: v47

        # Retrieve routers from the ThingsIX API.
        thingsix_api:
            # ThingsIX router API.
            #
            # ThingsIX offers an API to fetch registered routers from. This API
            # syncs periodically with the router registry smart contract. The
            # preferred method is to fetch them direct from the smart contract
            # using the on_chain method. If that is not possible the API can be
            # used.
            endpoint: https://api.thingsix.com/routers/v1/snapshot

            # Interval when to fetch the latest set of routers from the ThingsIX
            # API.
            #
            # Routes don't frequently change and are cached. There is no point
            # in setting this interval to a very small value. Set to 0m to
            # disable syncing.
            interval: 1h
        
        # Fetch routers from the ThingsIX router registry smart contract.
        #
        # This address is environment specific, see the ThingsIX
        # documentation for a list of router registry addresses per
        # environment. This requires blockchain.polygon configuration.
        # on_chain:
        #     registry: 0xd6bcc904C2B312f9a3893d9D2f5f2b6b0e86f9a1
        #     # retrieve router list from registry every interval
        #     interval: 1h

# Logging related configuration
log:
    # log level
    level: info      # [trace,debug,info,warn,error,fatal,panic]
    # Include timestamp in logging
    timestamp: true  # [true, false]

# Blockchain configuration
blockchain:
    # Polygon configuration.
    polygon:
        # Polygon node RPC endpoint
        endpoint: https://polygon-rpc.com
        # Block confirmations, polygon blocks are final after 128 confirmations
        confirmations: 128

# Database releated configuration
database:
    # Configure a Postgresql database
    postgresql:
        # uri: <uri>
        # Postgresql database name
        database: thingsix-gateways
        # Driver name
        drivername: postgres
        # Database host
        host: localhost
        # Database username
        user: thingsix-forwarder
        # Database password
        password: mypasswd
        # Database port
        port: 5432
        # Enable sslmode
        sslmode: disable
        # Enable query logging
        enableLogging: false

# Optionally enable metrics
metrics:
    # Enable prometheus http service
    prometheus:
        address: 0.0.0.0:8888
        path: /metrics
