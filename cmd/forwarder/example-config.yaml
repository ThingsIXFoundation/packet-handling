# Copyright 2022 Stichting ThingsIX Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

forwarder:
    # described backend for the gateways
    backend:
        # Use Semtech UDP forwarder backend
        semtech_udp:
            # ip:port to bind the UDP listener to, ensure it is accessible by the gateways
            #
            # Example: 0.0.0.0:1680 to listen on port 1680 for all network interfaces.
            udp_bind: 0.0.0.0:1680
            # Fake RX timestamp.
            #
            # Fake the RX time when the gateways do not have GPS, in which case
            # the time would otherwise be unset.
            fake_rx_time: false
    
    # Gateways that can use this forwarder
    gateways:
        # Gateway store
        #
        # Gateway
        store:
            # File based gateway store. This store contains all gateways and
            # their identity keys.
            #
            # Full gateway store path on the file system
            file: /etc/thingsix-forwarder/gateways.yaml
        
        # Optionally record gateway local id's for unknown gateways to a file. 
        # This file can be imported into the gateway store later. This is
        # convenient if you have a lot of gateways that you would need to 
        # add to the store 1 by 1.
        record_unknown:
            # path to file where unknown gateways are recorded, must be
            # writeable by the forwarder.
            file: /etc/thingsix-forwarder/unknown_gateways.yaml

    # Routers to forward gateway data to.
    routers:
        # List with default routers
        #
        # Default routers are routers that will receive all gateway data and
        # don't have to be registered at ThingsIX.

        #default:
        #    - endpoint: localhost:3200
        #      name: v47
        
        # Fetch routers from the ThingsIX router registry smart contract.
        #
        # This address is environment specific, see the ThingsIX
        # documentation for a list of router registry addresses per
        # environment. This requires blockchain.polygon configuration.

        #on_chain:
            #registry: 0xd6bcc904C2B312f9a3893d9D2f5f2b6b0e86f9a1

            # retrieve router list from registry every interval

            #interval: 30m

        # Retrieve routers from the ThingsIX API.
        thingsix_api:
            # ThingsIX router API.
            #
            # ThingsIX offers an API to fetch registered routers from. This API
            # syncs periodically with the router registry smart contract. The
            # preferred method is to fetch them direct from the smart contract
            # using the on_chain method. If that is not possible the API can be
            # used.
            endpoint: https://api.thingsix.com/routers/v1/snapshot

            # Interval when to fetch the latest set of routers from the ThingsIX
            # API.
            #
            # Routes don't frequently change and are cached. There is no point
            # in setting this interval to a very small value.
            interval: 30m

# Logging related configuration
log:
    level: info      # [trace,debug,info,warn,error,fatal,panic]
    timestamp: true  # [true, false]

# Blockchain related configuration
blockchain:
    polygon:
        # Polygon node RPC endpoint
        endpoint: https://polygon-rpc.com
        # Polygon chain id; mainnet=137, mumbai testnet=80001
        chain_id: 137
        # Block confirmations, polygon blocks are final after 128 confirmations
        confirmations: 128

# Optionally enable metrics
metrics:
    # Enable prometheus http service
    prometheus:
        address: 0.0.0.0:8888
        path: /metrics
